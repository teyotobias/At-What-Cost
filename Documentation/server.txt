The server.js file is the entry point for the backend of the
MERN stack eCommerce application. It sets up and configures the
Express server, middleware, static file serving, and API routes.

Summary:
1. Environment configuration: loads environment variables from a '.env' file into
   process.env to manage application settings securely and flexibly.
2. Database Connection: establishes a connection to mongo database using
   configuration settings, ensuring that the application can interact with it.
3. Initialization of Express App: Creates and configures an Express application insance to handle HTTP 
   requests, define routes, and manage middleware.

.use: mounts middleware or routes at the specified path

Express is a backend web application framework for building
RESTful APIs with Node.js. Designed for buildin web apps
and APIs. The standard server framework for Node.js

Node.js is a Javascript runtime environment. Executes JS code
outside a web browser. Allows development with JS to write
command line tools and for server-side scripting. Makes it possible
to build back-end applications using JS.

Node.js and Express.js together are great for running web servers,
microservices, and many other services independent from a browser
runtime environment.

Client-side scripting versus Server-Side scripting?

Client Side Scripting:
- runs on the user's computer, browser interprets the script
- SOURCE CODE IS VISIBLE TO user
- Used for validations and functionality for the user events
Server Side Scripting: SSJS = Server Side JavaScript
- runs on the web server
- source code is not visible to user bc the output of a server-side program is an HTML page
- used for business logic and data access from the database. Pages are created dynamically.


Documentation:

Node.js modules: 'require', 'module.exports', 'import' statements for server-side libraries

Dependencies:
Express: Web framework for Node.js
Path: Utility module for working with file and directory paths
Morgan: HTTP request logger middleware
CORS: Middleware to enable Cross-Origin-Resource Sharing
dotenv: Loads environment variables from a '.env' file.


SETUP

1. Environment Configuration
 - require('dotenv').config()
 - dotenv package used to load environment variables from a
   .env file into 'process.env'. DB credentials, API keys, secrets.
 2. Database Connection
 - require('./config/database')
 - requring and executing a script that includes logic to 
   connect to MongoDB database server using connection string.
   This initiates the connection. When it is executed, it runs the
   database connection logic defined at the endpoint.
 3. Initialize express app:
 - const app = express()
 - Foundation of creating a server-side application with Node.js.
   WAF (Web Application Framework) that simplifies handling HTTP requests,
   building APIs, and managing middleware. This Step creates
   an instance of an Express application which is used to define
   routes, middleware, and other server configurations.
   Must require first, then create instance express() then configure
- require('express') imports the express module.
- const app = express() creates an Express application instance

Defining middleware to parse JSON bodies: app.use(express.json());

Route Definitions: defines routes to handle incoming HTTP requests.
app.get('/', (req,res) =? {
  res.send('Hello, World!');
})


MIDDLEWARE: intermediate functions handling requests and responses.

1. CORS Middleware: 
- CORS is a security feature implemented by web browsers to prevent unauthorized
  access to resources on different domains. CORS middleware allows server to specify who can 
  access its resources and how. By default, allows requests from any origin. Can be used to restrict origins.
2. HTTP Request Logger - morgan : 
- logging HTTP requests is crucial for monitoring, debugging, and auditing
   behavior of the application. Tracks incoming requests, responses, and any errors that occur. Morgan middleware is a
   popular HTTP request logger for Node.js application. Logs details for each request such as method, URL, status code, response time.
3. JSON Parsing Middleware - expres.json
- Parsing JSON for handling HTTP requests with JSON payloads, common format for API communication.
  Express provides build in middleware to parse JSON bodies. The express.json middleware parses incoming requests with JSON
  payloads and makes the parsed data available on req.body.
4. Static File Serving:
- app.use(express.static(path.join(__dirname, 'build'))); - serves static files from the 'build' directory at the root URL
- app.use('/public', express.static(path.join(__dirname, 'public'))); - serves static files from the 'public' directory at the '/public' URL path.
- essential for web applications to provide the necessary resources for the client side to function properly.
- Express provides built in middleware to serve static files from a specified directory
5. Token Verification Middleware
- app.use(require('./config/checkToken'));
- verifies the presence and validity of tokens in incoming requests, ensuring that only authenticated users
  can acceess certain resources.


API ROUTES: defining API routes to allow the server to handle different HTTP requests at specific endpoints, organizing code.
- user routes: app.use('/api/users', require('./routes/api/users')); 
  Tells express application to use router defined in /routes/api/users for any requests starting with '/api/users'
- protected routes (Items and Orders):
  const ensureLoggedIn = require('./config/ensureLoggedIn');
  app.use('/api/items', ensureLoggedIn, require('./routes/api/items'));
  app.use('/api/orders', ensureLoggedIn, require('./routes/api/orders'));
- catch all route: handles all non-AJAX requests by returning the 'index.html' from the 'build' directory.
  app.get('/*', function(req, res) {
   res.sendFile(path.join(__dirname, 'build', 'index.html'));
  });

SERVER SETUP: defines the port and starts the express server
- const port = process.env.PORT || 3001;
  app.listen(port, function() {
    console.log(`Express app running on port ${port}`);
  });


Summary and Analysis
Backend Features:

RESTful API: Serves API routes for users, items, and orders.
Authentication & Authorization: Uses JWT for token verification and ensureLoggedIn middleware to protect routes.
Static File Serving: Serves static files from the build and public directories.
Middleware: Utilizes various middleware for logging, JSON parsing, CORS, and token verification.

Server Configuration:

Configured to run on port 3001 to avoid conflict with the React development server.

Development Practices:

Uses environment variables for configuration.
Provides a catch-all route to support client-side routing in a Single Page Application (SPA).


